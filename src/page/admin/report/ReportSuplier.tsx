import React, { useEffect, useState, useRef } from 'react'
import { t } from 'i18next';
import { Table, Button } from 'antd'
import { PrinterOutlined } from "@ant-design/icons";
import { ISupplier } from '../../../types/admin/supplier';
import { getSupplierHeader } from './column/header';
import supplier from '../../../api/supplier';

const PrintableTable = React.forwardRef<HTMLDivElement, { data: ISupplier[]; columns: any[] }>((props, ref) => {
    const { data, columns } = props;

    return (
        <div ref={ref} className="p-8 bg-white">
            <style>
                {`
          @media print {
            @page {
              size: A4;
              margin: 1in;
            }
            body {
              font-family: Arial, sans-serif;
              color: black !important;
              background: white !important;
            }
            .print-table {
              width: 100%;
              border-collapse: collapse;
              font-size: 12px;
            }
            .print-table th,
            .print-table td {
              border: 1px solid #000;
              padding: 8px;
              text-align: left;
            }
            .print-table th {
              background-color: #f5f5f5 !important;
              font-weight: bold;
            }
            .print-header {
              text-align: center;
              margin-bottom: 20px;
            }
            .print-title {
              font-size: 24px;
              font-weight: bold;
              margin-bottom: 10px;
            }
            .print-date {
              font-size: 14px;
              color: #666;
            }
            .no-print {
              display: none !important;
            }
          }
        `}
            </style>

            <div className="print-header">
                <h1 className="print-title">Supplier Report</h1>
                <p className="print-date">Generated on: {new Date().toLocaleDateString()}</p>
            </div>

            <table className="print-table">
                <thead>
                    <tr>
                        {columns.map((col, index) => (
                            <th key={index}>{col.title}</th>
                        ))}
                    </tr>
                </thead>
                <tbody>
                    {data.map((item, rowIndex) => (
                        <tr key={rowIndex}>
                            {columns.map((col, colIndex) => {
                                let cellContent = '';

                                // Handle different column types
                                if (col.dataIndex === 'index') {
                                    cellContent = (rowIndex + 1).toString();
                                } else if (col.render && typeof col.render === 'function') {
                                    // For custom render functions, try to extract the value
                                    try {
                                        const renderedValue = col.render((item as any)[col.dataIndex], item, rowIndex);
                                        cellContent = typeof renderedValue === 'string' ? renderedValue : (item as any)[col.dataIndex]?.toString() || '-';
                                    } catch {
                                        cellContent = (item as any)[col.dataIndex]?.toString() || '-';
                                    }
                                } else {
                                    cellContent = (item as any)[col.dataIndex]?.toString() || '-';
                                }

                                return <td key={colIndex}>{cellContent}</td>;
                            })}
                        </tr>
                    ))}
                </tbody>
            </table>

            <div style={{ marginTop: '20px', fontSize: '12px', color: '#666' }}>
                <p>Total Records: {data.length}</p>
                <p>Report generated by: Supplier Management System</p>
            </div>
        </div>
    );
});
PrintableTable.displayName = 'PrintableTable';

const ReportSupplier: React.FC = () => {
    const [getAllSupplier, setGetAllSupplier] = useState<ISupplier[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const printRef = useRef<HTMLDivElement>(null);

    const columns = getSupplierHeader();

    // const handlePrint = useReactToPrint({
    //     contentRef: printRef,
    //     documentTitle: 'Supplier Report',
    //     pageStyle: '@page { size: A4; margin: 0.5in; }'
    // });

    const fetchData = async () => {
        try {
            setIsLoading(true);
            const res = await supplier.getAllSupplier();
            setGetAllSupplier(res.data);
            return res;
        } catch (error) {
            console.error('Error fetching supplier data:', error);
            throw error;
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    if (isLoading) {
        return (
            <div className="p-6 bg-gray-50 min-h-screen flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                    <p className="text-gray-600">Loading suppliers...</p>
                </div>
            </div>
        );
    }

    return (
        <div>
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-semibold text-gray-800">Supplier Report</h1>
                <Button
                    type="primary"
                    icon={<PrinterOutlined />}
                    onClick={() => { }}
                    disabled={isLoading || getAllSupplier.length === 0}
                    className="flex items-center gap-2"
                >
                    Print Report
                </Button>
            </div>

            <Table
                loading={isLoading}
                className="bg-white rounded-lg"
                title={() => {
                    return (
                        <div className="flex justify-between">
                            <div className="font-bold text-xl">
                                {t("supplier.title_supplier")}
                            </div>
                        </div>
                    );
                }}
                columns={columns}
                dataSource={getAllSupplier}
                pagination={{ pageSize: 10 }}
            />


            <div style={{ display: 'none' }}>
                <PrintableTable
                    ref={printRef}
                    data={getAllSupplier}
                    columns={columns}
                />
            </div>
        </div>
    );
};

export default ReportSupplier;
