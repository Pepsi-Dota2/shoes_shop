import React, { useEffect, useState, useRef } from 'react'
import { t } from 'i18next';
import { Table, Button, Card, Row, Col, Statistic } from 'antd'
import { PrinterOutlined } from "@ant-design/icons";
import { ISupplier } from '../../../types/admin/supplier';
import { getSupplierHeader } from './column/header';
import supplier from '../../../api/supplier';

const PrintableTable = React.forwardRef<HTMLDivElement, { data: ISupplier[]; columns: any[] }>((props, ref) => {
    const { data, columns } = props;

    return (
        <div ref={ref} className="p-8 bg-white">
            <style>
                {`
          @media print {
            @page {
              size: A4;
              margin: 1in;
            }
            body {
              font-family: Arial, sans-serif;
              color: black !important;
              background: white !important;
            }
            .print-table {
              width: 100%;
              border-collapse: collapse;
              font-size: 12px;
            }
            .print-table th,
            .print-table td {
              border: 1px solid #000;
              padding: 8px;
              text-align: left;
            }
            .print-table th {
              background-color: #f5f5f5 !important;
              font-weight: bold;
            }
            .print-header {
              text-align: center;
              margin-bottom: 20px;
            }
            .print-title {
              font-size: 24px;
              font-weight: bold;
              margin-bottom: 10px;
            }
            .print-date {
              font-size: 14px;
              color: #666;
            }
            .no-print {
              display: none !important;
            }
          }
        `}
            </style>

            <div className="print-header">
                <h1 className="print-title">Supplier Report</h1>
                <p className="print-date">Generated on: {new Date().toLocaleDateString()}</p>
            </div>

            <table className="print-table">
                <thead>
                    <tr>
                        {columns.map((col, index) => (
                            <th key={index}>{col.title}</th>
                        ))}
                    </tr>
                </thead>
                <tbody>
                    {data.map((item, rowIndex) => (
                        <tr key={rowIndex}>
                            {columns.map((col, colIndex) => {
                                let cellContent = '';

                                // Handle different column types
                                if (col.dataIndex === 'index') {
                                    cellContent = (rowIndex + 1).toString();
                                } else if (col.render && typeof col.render === 'function') {
                                    // For custom render functions, try to extract the value
                                    try {
                                        const renderedValue = col.render((item as any)[col.dataIndex], item, rowIndex);
                                        cellContent = typeof renderedValue === 'string' ? renderedValue : (item as any)[col.dataIndex]?.toString() || '-';
                                    } catch {
                                        cellContent = (item as any)[col.dataIndex]?.toString() || '-';
                                    }
                                } else {
                                    cellContent = (item as any)[col.dataIndex]?.toString() || '-';
                                }

                                return <td key={colIndex}>{cellContent}</td>;
                            })}
                        </tr>
                    ))}
                </tbody>
            </table>

            <div style={{ marginTop: '20px', fontSize: '12px', color: '#666' }}>
                <p>Total Records: {data.length}</p>
                <p>Report generated by: Supplier Management System</p>
            </div>
        </div>
    );
});
PrintableTable.displayName = 'PrintableTable';

const ReportSupplier: React.FC = () => {
    const [getAllSupplier, setGetAllSupplier] = useState<ISupplier[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const printRef = useRef<HTMLDivElement>(null);

    const columns = getSupplierHeader();

    const handlePrint = () => {
        if (printRef.current) {
            const printContent = printRef.current.innerHTML;
            const originalContent = document.body.innerHTML;

            document.body.innerHTML = printContent;
            window.print();
            document.body.innerHTML = originalContent;
            window.location.reload();
        }
    };

    const fetchData = async () => {
        try {
            setIsLoading(true);
            const res = await supplier.getAllSupplier();
            setGetAllSupplier(res.data);
            return res;
        } catch (error) {
            console.error('Error fetching supplier data:', error);
            throw error;
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    // Calculate summary statistics
    const calculateSummary = () => {
        const totalRecords = getAllSupplier.length;
        const totalAmount = getAllSupplier.reduce((sum, item) => {
            const amount = (item as any).amount || (item as any).price || (item as any).total || 0;
            return sum + (typeof amount === 'number' ? amount : parseFloat(amount) || 0);
        }, 0);

        const totalQuantity = getAllSupplier.length; // Or use actual quantity field if available

        return { totalRecords, totalAmount, totalQuantity };
    };

    const { totalRecords, totalAmount, totalQuantity } = calculateSummary();

    if (isLoading) {
        return (
            <div className="p-6 bg-gray-50 min-h-screen flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                    <p className="text-gray-600">Loading suppliers...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="p-6 bg-gray-50 min-h-screen">
            {/* Header */}
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-3xl font-bold text-gray-800">Supplier Report</h1>
                <Button
                    type="primary"
                    icon={<PrinterOutlined />}
                    onClick={handlePrint}
                    disabled={isLoading || getAllSupplier.length === 0}
                    className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600"
                    size="large"
                >
                    Print Report
                </Button>
            </div>

            {/* Order Status Table */}
            <Card className="mb-6">
                <div className="mb-4">
                    <h2 className="text-xl font-semibold text-gray-700">Order Status</h2>
                </div>

                <Table
                    loading={isLoading}
                    className="rounded-lg overflow-hidden"
                    columns={columns}
                    dataSource={getAllSupplier}
                    pagination={{
                        pageSize: 10,
                        showSizeChanger: true,
                        showQuickJumper: true,
                        showTotal: (total, range) =>
                            `${range[0]}-${range[1]} of ${total} items`,
                    }}
                    size="middle"
                />
            </Card>

            {/* Summary Report */}
            <Card>
                <div className="mb-6">
                    <h2 className="text-xl font-semibold text-gray-700">
                        รายงานสรุปยอด (Summary Report)
                    </h2>
                </div>

                <Row gutter={[24, 24]}>
                    <Col xs={24} sm={8}>
                        <Card className="text-center bg-blue-50 border-blue-200">
                            <Statistic
                                title={
                                    <div className="text-gray-600 font-medium">
                                        จำนวนข้อมูลทั้งหมด
                                    </div>
                                }
                                value={totalRecords}
                                suffix="Kip"
                                valueStyle={{
                                    color: '#1890ff',
                                    fontSize: '2rem',
                                    fontWeight: 'bold'
                                }}
                            />
                            <div className="text-sm text-gray-500 mt-2">Total Records</div>
                        </Card>
                    </Col>

                    <Col xs={24} sm={8}>
                        <Card className="text-center bg-green-50 border-green-200">
                            <Statistic
                                title={
                                    <div className="text-gray-600 font-medium">
                                        จำนวนสินค้าทั้งหมด
                                    </div>
                                }
                                value={totalQuantity}
                                valueStyle={{
                                    color: '#52c41a',
                                    fontSize: '2rem',
                                    fontWeight: 'bold'
                                }}
                            />
                            <div className="text-sm text-gray-500 mt-2">Total Quantity</div>
                        </Card>
                    </Col>

                    <Col xs={24} sm={8}>
                        <Card className="text-center bg-purple-50 border-purple-200">
                            <Statistic
                                title={
                                    <div className="text-gray-600 font-medium">
                                        ยอดรวมทั้งหมด
                                    </div>
                                }
                                value={totalAmount}
                                suffix="กีบ"
                                valueStyle={{
                                    color: '#722ed1',
                                    fontSize: '2rem',
                                    fontWeight: 'bold'
                                }}
                                formatter={(value) => `${Number(value).toLocaleString()}`}
                            />
                            <div className="text-sm text-gray-500 mt-2">Total Amount</div>
                        </Card>
                    </Col>
                </Row>
            </Card>

            {/* Hidden Printable Component */}
            <div style={{ display: 'none' }}>
                <PrintableTable
                    ref={printRef}
                    data={getAllSupplier}
                    columns={columns}
                />
            </div>
        </div>
    );
};

export default ReportSupplier;